<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (SUSE Linux Enterprise Server for x86-64) 2017.2.1 (Build 801)" ts="2018-03-23 17:00:34">
<Class name="%DeepSee.UI.DSButtonsViewer">
<Description>
DeepSee DeepSeeButtons Viewer.
Display contents of the DeepSeeButtons html file for the current namespace.
</Description>
<Super>%DeepSee.UI.standardPage</Super>
<System>4</System>
<TimeChanged>64730,61129.392856</TimeChanged>
<TimeCreated>64636,45154.455633</TimeCreated>

<Parameter name="PAGENAME">
<Default>DeepSeeButtons Viewer</Default>
</Parameter>

<Parameter name="DOCBOOKID">
<Default>D2MODEL_cube_build_errors</Default>
</Parameter>

<Property name="targetURL">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Cubes">
<Description>
Property trackingId As %ZEN.Datatype.string;</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="trackingId">
<Description>
Id used to track progress.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="nameSpace">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="getLogs">
<Type>%Boolean</Type>
</Property>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
body {
	background: rgb(240,240,240);
}
.ribbonTitle {
	color: rgb(71,72,67);
	background: rgb(140,221,174);
}
.statusTable {
	background: white;
	border: 1px solid #404040;
	width: 500px;
}

.statusTable td {
	padding: 2px;
	padding-right: 5px;
	padding-left: 5px;
	border-right: 1px solid #808080;
	border-bottom: 1px solid #808080;
}

#sourceFrame {
	border: 1px solid #808080;
	background: white;
	overflow: auto;
	margin-left: 20px;
}

#sourceFrame pre {
	color: #404040;
	padding: 3px;
}

.footerlinks {
	font-family: Arial, Helvetica, sans-serif;
	font-size: 10px;
	font-style: bold;
	color: #3b84bc;
	padding-left:4px;
}
</style>
]]></Data>
</XData>

<XData name="contentPane">
<Description>
This XML defines the contents of the contents pane for this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen" 
	xmlns:deepsee="http://www.intersystems.com/deepsee"
>

<vgroup cellStyle="padding-bottom: 4px;">
<label label="Cubes for detail information" labelClass=""/>

<hgroup label="File" cellVAlign="top">
<text id="DSBReport" label="" size="50" 
hint="Output file"/>
<image src="deepsee/ds2_magnify_44.png" width="16" height="16" onclick="alert('todo');"/>
</hgroup>
<hgroup label="Cubes" cellVAlign="top">
<text id="Cubes" label="" value="#(%page.Cubes)#" size="50" 
hint="List cubes. Type ALL for all cubes (might take some time)"/>
<image src="deepsee/ds2_magnify_44.png" width="16" height="16" onclick="zenPage.editItem('GetCubeList');"/>
</hgroup>

<checkbox id="getLogs" caption="Collect logs" title="Include cconsole.log, Query Log, and DeepSee logs in DeepSeeButtons" 
onchange="zenPage.applyDetails(zenThis.id);" value="1"/>
</vgroup>
<html id="status"/>
<timer id="timer" ontimeout="zenPage.updateStatus();"/>

<!--
<html id="sourceFrame" OnDrawContent="DrawLogFile"/>
src="DeepSeeButtons_ISC_20180103_1402.html"
-->
<iframe id="sourceFrame" width="50%" height="50%" hidden="true"
src="DeepSeeButtons_ISC_20180103_1402.html" title="works with this dir: /home/amarin/intersystems/cache20172/csp/samples/DeepSeeButtons_ISC_20180103_1402.html"
    />
</pane>
]]></Data>
</XData>

<UDLText name="T">
<Content><![CDATA[
/*
/// Draw contents of log file pane.
Method DrawLogFile(pSeed As %String) As %Status
{
	Set tSC = $$$OK
	Try {
		Set tFileName = ##class(%DeepSee.Utils).%GetLogFileName()

		If ('##class(%File).Exists(tFileName)) {
			&html<<pre>>
			Write $$$Text("Log file does not exist: "),!
			Write tFileName,!
			&html<</pre>>
			Quit
		}
		&html<<a href="#bottom" name="top" class="footerlinks">#($$$TextHTML("[Goto Bottom]"))#</a>>
		&html<<pre>>
		Write tFileName,!
		Write $ZDT($ZU(188),3),!			// DTB332 - Use $ZU function which accounts for local time
		Write "-----------------------",!

		Set tFile = ##class(%File).%New(tFileName)
		Set tSC = tFile.Open("RS")
		If $$$ISERR(tSC) Quit
		While ('tFile.AtEnd) {
			Write $ZCVT(tFile.ReadLine(),"O","HTML"),!
		}

		Write "###",!
		&html<</pre>>
		&html<<a href="#top" name="bottom" class="footerlinks">#($$$TextHTML("[Goto Top]"))#</a>>
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}

	Quit tSC
}*/
]]></Content>
</UDLText>

<Method name="%OnGetTitle">
<Description>
Get the (localized) title string for the page.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $$$Text("DeepSeeButtons Viewer")
]]></Implementation>
</Method>

<Method name="%OnGetPageName">
<Description>
Get the name for the page.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $$$Text("DeepSeeButtons Viewer")
]]></Implementation>
</Method>

<Method name="%OnGetProductName">
<Description>
Get the product name for the page.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "DeepSee"
]]></Implementation>
</Method>

<Method name="OnGetRibbonInfo">
<Description>
Get information to display in the ribbon bar.</Description>
<FormalSpec>*pDisplay:%Boolean,*pViewIcons:%List,*pSortOptions:%List,*pSearchBox:%Boolean,*pRibbonTitle:%String,*pCommands:%List</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pDisplay = 1
	Set pSearchBox = 0
	Set pRibbonTitle = $$$Text("DeepSeeButtons Viewer")

	// commands
	// $LB(id,caption,help,onclick)
	//Set pCommands($I(pCommands)) = $LB("cmdDelete",$$$Text("test/Delete"),$$$Text("Delete DeepSeeButtons file"),"zenPage.deleteLog();")
	Set pCommands($I(pCommands)) = $LB("cmdRun",$$$Text("Run"),$$$Text("Run DeepSeeButtons"),"zenPage.runDSB();") 
	Set pCommands($I(pCommands)) = $LB("cmdShow",$$$Text("Show DSB"),$$$Text("Show DSB"),"zenPage.toggleDSB();")	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="onPopupAction">
<Description>
This client event is fired when the a popup page launched from this page fires an action.</Description>
<FormalSpec>popupName,action,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	switch(popupName) {
	case 'switchNamespace':
		var homeurl = zenLink("/csp/sys/%25CSP.Portal.Home.zen");
		var url = zenPage.GetNewURL(value,"_DeepSee.UI.DSButtonsViewer.zen");
		if (url == "" || value == "%SYS") url = homeurl;
		self.document.location = url;
		break;
	case 'GetCubeList':
		zenSetProp("Cubes","value",value)
	}
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// Ale: I took this from %CSP.Portal.CourceControl.Dialog.Manager
/// Code to resize the iframe based on the window size and check whether a title 
ClientMethod initializeFrame(newSrc) [ Language = javascript ]
{
	var sourceFrame = zen('sourceFrame');
	var iframe = sourceFrame.findElement('iframe');
	// iframe.contentDocument doesn't work as expected on IE8, so use more circuitous reference.
	if (iframe && iframe.contentWindow && iframe.contentWindow.document && (iframe.contentWindow.document.title != null)) {
		document.title = iframe.contentWindow.document.title;
	}
	else if (!this._titleTimer) {
		this._titleTimer = setInterval('zenPage.updateTitle()',10);
	}
	if (newSrc) this.addCompletionCheck('zenPage.checkCompletion()',10);
	
	var width = zenGetWindowWidth();
	var height = zenGetWindowHeight();
	if (zenIsHTML5 && (zenIsIE || zenIsGecko)) {
		width -= 4;
		height -= 4;
	}
	else if (zenIsIE) {
		height -= 1;
	}
	
	sourceFrame.setProperty('width',width);
	sourceFrame.setProperty('height',height);
}
*/
]]></Content>
</UDLText>

<Method name="onlayoutHandler">
<Description>
Adjust sizes of components on the page.</Description>
<FormalSpec>load</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		//this.initializeFrame(load);
		this.adjustSizes();
	}
	catch(ex) {
		zenExceptionHandler(ex,arguments,'Error in onlayoutHandler');
	}
]]></Implementation>
</Method>

<Method name="adjustSizes">
<Description>
Adjust sizes of components on the page.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		var sourceFrame = zen('sourceFrame');
		var divLog = sourceFrame.getEnclosingDiv();

		// find size of window
		var winHeight = zenGetWindowHeight();
		var winWidth = zenGetWindowWidth();
		var th = this.getTitleAreaHeight();
		var h = winHeight - (25 + th);

		if (divLog) {
			divLog.style.width = winWidth - (25) + 'px';
			divLog.style.height = h + 'px';
		}
	}
	catch(ex) {
		zenExceptionHandler(ex,arguments,'Error in adjustSizes');
	}
]]></Implementation>
</Method>

<Method name="%GetDeepSeeButtonsFileName">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileName:%String="DeepSeeTasks"</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ##class(%Library.File).NormalizeFilename($system.Util.ManagerDirectory() _ pFileName _ "_" _ $ZU(5) _ ".log")
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description>
This class method callback is called just before the server-side page 
object is created.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set ..nameSpace = $Namespace
 		/*Set tSourceFrame = ..%GetComponentById("sourceFrame")
 		Set ..targetURL = "DeepSeeButtons_ISC_20180103_1402.html"
 		Set tFileName = ..%GetDeepSeeButtonsFileName()
 		
 		Set tSourceFrame.src = ..targetURL
 		*/
		Set tSC = ##super()
		If $$$ISERR(tSC) Quit
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="toggleDSB">
<Description>
Reload contents of file.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var DSBReport = zen('DSBReport').value;
	console.log(DSBReport)
	
	var DSBframe = zen('sourceFrame');
	//DSBframe.src = "DeepSeeButtons_ISC_20180103_1402.html";
	DSBframe.src = DSBReport;
	DSBframe.setHidden(0);
]]></Implementation>
</Method>

<Method name="deleteLog">
<Description>
Delete the log file.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (confirm($$$Text('Do you wish to delete the DeepSeeButtons file?'))) {
		alert("Here I should create something like %DeepSee.Utils).%KillLogFile")
		var msg = zenPage.DeleteLogFile();
		if ('' !== msg) {
			alert(msg);
		}
		zen('sourceFrame').refreshContents();
	}
]]></Implementation>
</Method>

<Method name="DeleteLogFile">
<Description>
Delete the log file.</Description>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set tMsg = ""
	Try {
		//Set tSC = ##class(%DeepSee.Utils).%KillLogFile()
		//ALE
		If $$$ISERR(tSC) Quit
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	If $$$ISERR(tSC) {
		Set tMsg = $System.Status.GetOneErrorText(tSC)
	}
	Quit tMsg
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// stuff transplanted

]]></Content>
</UDLText>

<Method name="editItem">
<FormalSpec>what</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log("editItem")
	var uiclass = "_DeepSee.UI.Dialog.GetProperties.cls";
	var spec = "status,scrollbars,resizable=yes,width=640,height=680";
	switch(what) {
	case 'GetCubeList':
		var value = zen("Cubes").getValue();
		var uiclass = "_DeepSee.UI.Dialog.GetCubeList.cls";
		break;
	}
	var parms = {
		CUBE:"PATIENTS", //this.cubeName,
		//ELEMENT:element,
		//DATASOURCE:this.dataSource,
		//SELECTEDCLASS:selectedItem._class,
		VALUE: value,
		WHAT: what //"GetCubeList"
	};
	console.log("parms:")
	console.log(parms)
	zenLaunchPopupWindow(uiclass,what,spec,parms);
]]></Implementation>
</Method>

<Method name="runDSB">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.disableCommandButton("cmdRun");
	this.disableCommandButton("cmdShow");
	var getLogs = zen("getLogs").getValue() * 1;
	this.trackingId = this.RunDeepSeeButtons(this.nameSpace, zen("Cubes").getValue(), "", getLogs)
	console.log(this.trackingId)
	if (this.trackingId!='') {
		zen('timer').timeout = 250;
		zen('timer').startTimer();
	} else {
		this.enableCommandButton("cmdRun");
		this.enableCommandButton("cmdShow");
	}	
	return;
]]></Implementation>
</Method>

<Method name="RunDeepSeeButtons">
<Description>
Start the build cube process in the background.
Return the tracking id.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameSpace:%String,pCubes:%String="",htmlfile:%String,pGetLogs:%Integer=1</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tTrackingId = ""
	Set tJobTimeOut = 10
	Set htmlfile="/home/amarin/Desktop/a.html" //$ZUtil(12)
	Set pProceed=1
	Set pTracking=1
	Job ^DeepSeeButtons(pNameSpace,pCubes,pGetLogs,htmlfile,pTracking)::tJobTimeOut
	If '$Test {
		&js<alert('Unable to start background job.');>
		Set tTrackingId = ""
	} Else {
		Set tTrackingId = $ZChild
	}
	Quit tTrackingId
]]></Implementation>
</Method>

<Method name="updateStatus">
<Description>
Update the status area.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var status = this.CheckStatus(this.trackingId);
	var html = zen('status');
	if (status != '') { 
		html.setContent(status);
		zen('timer').timeout = 250;
		zen('timer').startTimer();
	} else {
		this.trackingId = '';
		this.disableCommandButton("cmdRun");
		// when build finished, set focus on OK button so [Enter] key will exit easily.
		//zen("btnCancel").setProperty("caption",$$$Text("Done"));
		//this.disableCommandButton("cmdRun");
		this.enableCommandButton("cmdShow");
	}
	return;
]]></Implementation>
</Method>

<Method name="CheckStatus">
<Description>
Get the current status of the background task.</Description>
<FormalSpec>pTrackingId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tOutput = ""
	Set tIsComplete = 0
	// status is ($J,step) = $LB(phase,count,pct,errors)
	Set tStep = $O(^IRIS.Temp.DeepSeeButtonsTrack(pTrackingId,""),1,info)
	s tErr=""
	While (tStep'="") {
		//Set:tPhase="complete"!(tPhase="error") tIsComplete = 1
		//Set tIsActive = $O(^IRIS.Temp.DeepSeeButtonsTrack(pTrackingId,tStep))=""
		Set tPhase = $LG(info,1)
		Set:tPhase="complete"!(tPhase="error") tIsComplete = 1
		//Set tMsg = $Case(tPhase,"delete":$$$Text("Deleting facts"),"cube":$$$Text("working on cube"),"indices":$$$Text("Building indices"),"aggs":$$$Text("Computing aggregates"),"iknow":$$$Text("Processing iKnow measures"),"error":$$$Text("Error"),:$$$Text("Complete"))
		Set tMsg = $LG(info,2)
		Set tDetail = $LG(info,3)
		If tPhase="cube" {
			//Set tMsg = $LG(info,3)
			//Set tDetail = $LG(info,3)
		} ElseIf (tPhase="save") {
			//Set ..DSBReport = tDetail
			//Do %page.setDSBReport(tDetail)
			Do %page.%SetValueById("DSBReport",tDetail)
			Set tMsg = tMsg_tDetail
			Set tDetail = ""
		}
		/*Set tOutput = tOutput _ "<tr style="""_$S(tErr'="":"color:#da4848;",tIsActive:"font-weight:bold;",1:"background:#E0E0F0;")_""">"
		Set tOutput = tOutput _ "<td>"_tMsg_"</td>"
		*/
		
		Set tOutput = tOutput _ "<tr>"
		Set tOutput = tOutput _ "<td>"_tPhase_"</td>"
		If tErr = "" {
			Set tOutput = tOutput _ "<td align=""right"">"_tMsg_"</td>"
			Set tOutput = tOutput _ "<td align=""right"">"_tDetail_"</td>"
			//Set tOutput = tOutput _ "<td>"_$S(tIsActive:"&nbsp;",1:$$$Text("Complete"))_"</td>"
			//Set tOutput = tOutput _ "<td>&nbsp;</td>"
		} Else {
			/// Write out errors
			Set tOutput = tOutput _ "<td colspan=""4"">"_$ZCVT(tErr,"O","HTML")_"</td>"
		}
		Set tOutput = tOutput _ "</tr>"
		Set tStep = $O(^IRIS.Temp.DeepSeeButtonsTrack(pTrackingId,tStep),1,info)
	}
	
	Set:(tOutput'="") tOutput = "<div>"_$$$Text("Status")_ "</div><table class=""statusTable"" cellspacing=""0"" width=""100%"">" _ tOutput _ "</table>"
	Kill:tIsComplete ^IRIS.Temp.DeepSeeButtonsTrack(pTrackingId)
	Quit tOutput
]]></Implementation>
</Method>

<Method name="applyDetails">
<Description>
Apply changes from detail form.</Description>
<FormalSpec>id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	switch(id) {
	case 'getLogs':
		var elem = zen(id);
		var val = elem.getValue();
		elem.setValue(val);
	}
]]></Implementation>
</Method>
</Class>


<Class name="%DeepSee.UI.Dialog.GetCubeList">
<Description><![CDATA[
This dialog lets the user add or edit the Field List for a Listing.<br>
An existing list (delimited by comma) may be passed in.]]></Description>
<Super>%DeepSee.UI.Dialog.standardDialog</Super>
<System>4</System>
<TimeChanged>64729,34827.742045</TimeChanged>
<TimeCreated>64727,63621.331352</TimeCreated>

<Parameter name="APPLYBUTTON">
<Default>0</Default>
</Parameter>

<Property name="Expression">
<Description>
Cube name.
Property cubeName As %ZEN.Datatype.string(ZENURL = "CUBE");
Property ELEMENT As %ZEN.Datatype.string(ZENURL = "ELEMENT");</Description>
<Type>%ZEN.Datatype.string</Type>
<Parameter name="ZENURL" value="VALUE"/>
</Property>

<Property name="WHAT">
<Type>%ZEN.Datatype.string</Type>
<Parameter name="ZENURL" value="WHAT"/>
</Property>

<Property name="domain">
<Description>
Property dataSource As %ZEN.Datatype.string(ZENURL = "DATASOURCE");
Property CONTEXT As %ZEN.Datatype.string(ZENURL = "CONTEXT");
Translation domain of the cube</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
#dataSourceViewbox {
	display:inline-block; 
	height:400px; 
	max-height:400px; 
	overflow:auto;
	max-width:200px;
}
</style>
]]></Data>
</XData>

<XData name="dialogBody">
<Description>
Contents of the dialog body.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen" cellStyle="padding-bottom:8px;">
<vgroup labelPosition="left">
<!--<label id="cubeName" label="Cube name:" enclosingClass="zenLabel"/>
<label id="ELEMENT" label="Element name:" enclosingClass="zenLabel"/>-->
</vgroup>
<label id="titleText" label="Use the form below to list cubes for detail information. Select a field by double clicking a property from the tree." enclosingStyle="padding:2px;"/>
<hgroup cellStyle="padding:4px;" cellVAlign="top">
<group id="dataSourceViewbox" layout="none" >  
<dynaTree id="dataSource"  label="Source Class"
 imageContracted="images/disclosure-contracted.gif"
 imageExpanded="images/disclosure-expanded.gif"
 imageNode="images/spacer.gif"
 childIndent="10"
 ondblclick="zenPage.selectProperty(zenThis);" dragEnabled="false"
	showLines="false" showFolders="false"
	OnGetTreeInfo="GetDataSourceInfo">
<!--<parameter id="sourceP1" paramName="dataSource" value="#(%page.dataSource)#" />-->
</dynaTree>
</group>
<spacer width="5px"/>
<vgroup>
<listBox id="lstFields" label="Field List" width="350px" listHeight="200px" 
onchange="zenPage.selectedRow(zenThis);"/>
<spacer height="1"/>
</vgroup>

<vgroup id="idGroupButtons">
<image src="/csp/broker/images/spacer.gif" width="16" height="16"/>
<image src="deepsee/close_a_16.png" width="16" height="16" title="Remove the selected field" onclick="zenPage.doRemove();"/>
<image src="/csp/broker/images/spacer.gif" width="16" height="16"/>
<image src="deepsee/up_16.png" width="16" height="16" title="Move the selected field up" onclick="zenPage.moveItem('up');"/>
<image src="deepsee/down_16.png" width="16" height="16" title="Move the selected field down" onclick="zenPage.moveItem('dn');"/>
</vgroup>
</hgroup>
</pane>
]]></Data>
</XData>

<Method name="%OnGetTitle">
<Description>
Get the (localized) title string for the dialog.
This should be implemented in a subclass.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $$$TextHTML("Cube Selector")
]]></Implementation>
</Method>

<Method name="%OnGetSubtitle">
<Description>
Get the (localized) subtitle string for the dialog.
This should be implemented in a subclass.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $$$TextHTML("Cube Selector")
]]></Implementation>
</Method>

<Method name="getDialogValue">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log("getDialogValue")
	try {
		var values = "";
		var fieldObj = zen('lstFields');
		var len = fieldObj.getOptionCount();
		if (len > 0) values = fieldObj.getOptionValue(0);
		for (var i=1; i<len; i++) {
			values = values + "," + fieldObj.getOptionValue(i);
		}
		return encodeURIComponent(values);
		}
	catch(ex) {
		zenExceptionHandler(ex,arguments);
	}
	return '';
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*/// User edited a field. Change background color and enable Update button.
ClientMethod doEdit(editObj) [ Language = javascript ]
{
	if (zen('lstFields').getValue() != editObj.getValue()) {
		zen('btnUpdate').setDisabled(false);
		editObj.setProperty('controlStyle','background:rgb(255,243,190);');
	}
}
*/
]]></Content>
</UDLText>

<Method name="doRemove">
<Description>
User clicked the Remove image. Remove the field from Field List box.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var fieldObj = zen('lstFields');
	var len = fieldObj.getOptionCount();
	if (len == 0) return;
	var idx = fieldObj.getProperty("selectedIndex");
	if (idx < 0) {
		alert($$$Text("Please select the field you want to remove and try again."));
		return;
	}
	fieldObj.removeOption(idx);
]]></Implementation>
</Method>

<Method name="moveItem">
<Description>
User clicked the Move Up/Down image. Move the field up or down one level in the Field List box. dir = "up" or "dn".</Description>
<FormalSpec>dir</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var fieldObj = zen('lstFields');
	var len = fieldObj.getOptionCount();
	if (len == 0) return;
	var idx = fieldObj.getProperty("selectedIndex");
	if (idx < 0) {
		alert($$$Text("Please select the field you want to move and try again."));
		return;
	}
	var row = idx;
	if (dir == "up") {
		row--;
	} else {
		row++;	
	}
	if (row >= 0) fieldObj.moveOption(idx,row);
]]></Implementation>
</Method>

<Method name="selectProperty">
<Description>
User selected a property from the tree. Get the SQLName for the selected value and put it into the Field List box.</Description>
<FormalSpec>sourceObj</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var propFullValue = sourceObj.getNodeValue(sourceObj.getProperty("selectedIndex"));
	var fieldObj = zen('lstFields');
	fieldObj.appendOption(sourceObj.text,sourceObj.text);
]]></Implementation>
</Method>

<Method name="selectedRow">
<Description>
User clicked a row from the list box. Put selected value into textarea box for editing.</Description>
<FormalSpec>fieldObj</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//var textObj = zen("txtField");
	var headerObj = zen("headerField");		// DTB538
	console.log("selectedRow - ")
	
	// DTB638 - Only parse for listingField mode
	/*if ("ListingFieldList"==zenPage.WHAT) {
		var parsedField = this.parseSqlField(fieldObj.getValue());		// DTB538
		//textObj.setValue(fieldObj.getValue());
		textObj.setValue(parsedField[0]);		// DTB538
		headerObj.setValue(parsedField[1]);		// DTB538
		
		textObj.setProperty('controlStyle','background:white;');
		headerObj.setProperty('controlStyle','background:white;');		// DTB538
	}
	else {*/
		//textObj.setValue(fieldObj.getValue());
		//textObj.setProperty('controlStyle','background:white;');
	//}

	//zen('btnUpdate').setDisabled(true);
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		#; Load existing fields into list
		If ..Expression '= "" {
			Set tCombo = ..%GetComponentById("lstFields")
			
			Set cubeList = $LISTFROMSTRING(..Expression)
			Set cubeListLength=$LISTLENGTH(cubeList)
			For i=1:1:cubeListLength {
				Set tRow=$LG(cubeList,i)
				Set tOption = ##class(%ZEN.Auxiliary.option).%New()
				Do tCombo.options.Insert(tOption)
				Do ..%AddComponent(tOption)
				
				Set tOption.value = tRow
				Set tOption.text = tRow
				
		 	}
		 	// -DTB552
		}
	} Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetDataSourceInfo">
<Description>
Provide contents of the data source tree.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pRoot:%String,*pTree,&pParms]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Do ##class(%DeepSee.Utils).%GetCubeList(.cubeList,,1)
	Set cubetmp=""
	For i=1:1 {
		Set cubetmp=$order(cubeList(cubetmp))
		Quit:cubetmp=""
		Set ind=$I(pTree)
		Set pTree(0,"ch",ind)=""
		Set pTree(ind)=$LB(cubetmp,cubetmp,0,"",1)
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
